{
	"Meta": {
		"Generator": "1",
		"Format": "1",
		"Date": "2022-03-10 03:57:53.804889897 +0000 UTC m=+0.000218282"
	},
	"Functions": [
		{
			"Name": "GetFiles",
			"Line": "func GetFiles(root string) ([]string, error)",
			"Description": "Get all files ending in .go from a directory, recursively",
			"Parameters": [
				{
					"Name": "root",
					"Type": "string",
					"Description": "The root directory"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseDescription",
			"Line": "func ParseDescription(data string) string",
			"Description": "Parse the description of a comment",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to parse"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseParam",
			"Line": "func ParseParam(data string) Data",
			"Description": "Parse the parameter of a function comment",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to parse"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseProperty",
			"Line": "func ParseProperty(data string) Data",
			"Description": "Parse the property of a structure comment",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to parse"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseReturn",
			"Line": "func ParseReturn(data string) Data",
			"Description": "Parse the return value of a return comment",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to parse"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseStructure",
			"Line": "func ParseStructure(line string, StructureDocs StructureData) StructureData",
			"Description": "Parse a single line of a structure comment",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment to parse"
				},
				{
					"Name": "StructureDocs",
					"Type": "StructureData",
					"Description": "The Structure Docs for adding data"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseFunctionName",
			"Line": "func ParseFunctionName(line string, FunctionDocs FunctionData) FunctionData",
			"Description": "Parse name of a function",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The line of comment"
				},
				{
					"Name": "FunctionDocs",
					"Type": "FunctionData",
					"Description": "The Function Docs for adding data"
				}
			],
			"Returns": {}
		},
		{
			"Name": "ParseFunction",
			"Line": "func ParseFunction(line string, FunctionDocs FunctionData) (FunctionData, string)",
			"Description": "Parse a single line of a function comment",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The line of comment"
				},
				{
					"Name": "FunctionDocs",
					"Type": "FunctionData",
					"Description": "The Function Docs for adding data"
				}
			],
			"Returns": {}
		},
		{
			"Name": "GetType",
			"Line": "func GetType(line string) (string, string)",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to parse"
				}
			],
			"Returns": {
				"Type": "string,string"
			}
		},
		{
			"Name": "GetName",
			"Line": "func GetName(line string) (string, string)",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to parse"
				}
			],
			"Returns": {
				"Type": "string,string"
			}
		},
		{
			"Name": "Split",
			"Line": "func Split(line string, seperator string) []string",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to split"
				},
				{
					"Name": "seperator",
					"Type": "string",
					"Description": "The seperator to split line with"
				}
			],
			"Returns": {
				"Type": "[]string"
			}
		},
		{
			"Name": "StartsWith",
			"Line": "func StartsWith(line string, prefix string) bool",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to check"
				},
				{
					"Name": "prefix",
					"Type": "string",
					"Description": "The prefix to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		},
		{
			"Name": "EndsWith",
			"Line": "func EndsWith(line string, suffix string) bool",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to check"
				},
				{
					"Name": "suffix",
					"Type": "string",
					"Description": "The suffix to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		},
		{
			"Name": "Replace",
			"Line": "func Replace(line string, replace string, with string) string",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to replace the word in"
				},
				{
					"Name": "replace",
					"Type": "string",
					"Description": "The word to replace"
				},
				{
					"Name": "with",
					"Type": "string",
					"Description": "The word to replace with"
				}
			],
			"Returns": {
				"Type": "string"
			}
		},
		{
			"Name": "Remove",
			"Line": "func Remove(line string, remove string) string",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to replace the word in"
				},
				{
					"Name": "replace",
					"Type": "string",
					"Description": "The word to remove"
				}
			],
			"Returns": {
				"Type": "string"
			}
		},
		{
			"Name": "Trim",
			"Line": "func Trim(line string) string",
			"Parameters": [
				{
					"Name": "line",
					"Type": "string",
					"Description": "The comment line to trim"
				}
			],
			"Returns": {
				"Type": "string"
			}
		},
		{
			"Name": "IsFunctionLine",
			"Line": "func IsFunctionLine(data string) bool",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment line to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		},
		{
			"Name": "IsStructureLine",
			"Line": "func IsStructureLine(data string) bool",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment line to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		},
		{
			"Name": "IsFunctionOfStructureLine",
			"Line": "func IsFunctionOfStructureLine(data string) bool",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to check"
				}
			],
			"Returns": {
				"Type": "string"
			}
		},
		{
			"Name": "IsFunction",
			"Line": "func IsFunction(data string) bool",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		},
		{
			"Name": "IsStructure",
			"Line": "func IsStructure(data string) bool",
			"Parameters": [
				{
					"Name": "data",
					"Type": "string",
					"Description": "The comment to check"
				}
			],
			"Returns": {
				"Type": "bool"
			}
		}
	],
	"Structures": [
		{
			"Name": "Data",
			"Line": "type Data struct",
			"Description": "The generic data structure extended by other documentation structures",
			"Properties": [
				{
					"Name": "Name",
					"Type": "string",
					"Description": "The Name of the structure"
				},
				{
					"Name": "Type",
					"Type": "string",
					"Description": "The type of the structure"
				},
				{
					"Name": "Description",
					"Type": "string",
					"Description": "The Description of the structure"
				}
			]
		},
		{
			"Name": "FunctionData",
			"Line": "type FunctionData struct",
			"Description": "The function data structure used for functions",
			"Properties": [
				{
					"Name": "Name",
					"Type": "string",
					"Description": "The Name of the function"
				},
				{
					"Name": "Description",
					"Type": "string",
					"Description": "The Description of the function"
				},
				{
					"Name": "Parameters",
					"Type": "[]Data",
					"Description": "The Parameters of the function"
				},
				{
					"Name": "Returns",
					"Type": "Data",
					"Description": "The Return value of the function"
				}
			]
		},
		{
			"Name": "StructureData",
			"Line": "type StructureData struct",
			"Description": "The structure data structure used for structures",
			"Properties": [
				{
					"Name": "Name",
					"Type": "string",
					"Description": "The Name of the structure"
				},
				{
					"Name": "Description",
					"Type": "string",
					"Description": "The Description of the structure"
				},
				{
					"Name": "Properties",
					"Type": "[]Data",
					"Description": "The properties of the structure"
				}
			]
		},
		{
			"Name": "Meta",
			"Line": "type Meta struct",
			"Description": "The general meta information of the documentation",
			"Properties": [
				{
					"Name": "Generator",
					"Type": "string",
					"Description": "The Name of the structure"
				},
				{
					"Name": "Format",
					"Type": "string",
					"Description": "The Description of the structure"
				},
				{
					"Name": "Date",
					"Type": "string",
					"Description": "The properties of the structure"
				}
			]
		},
		{
			"Name": "DocgenData",
			"Line": "type DocgenData struct",
			"Description": "The DocgenData used to make the docs JSON",
			"Properties": [
				{
					"Name": "Meta",
					"Type": "Meta",
					"Description": "The general meta information of the documentation"
				},
				{
					"Name": "Functions",
					"Type": "[]FunctionData",
					"Description": "The Functions of the project"
				},
				{
					"Name": "Date",
					"Type": "[]StructureData",
					"Description": "The Structures of the project"
				}
			]
		}
	]
}